// 1.负值的计算 如18
// 1)取二进制  0000...0010010
// 2)取反      1111...1101101
// 3)+1        1111...1101110

let num = 0;
// 1. || (短路或)
// 返回第一个真值(有真值)或最后一个值(无真值)
// 注意：找到第一个真值后 不会判断后续的变量
console.log('0 || null --',0 || null); // null
console.log('2 || 1 --',2 || 1); // 2
console.log('1 | num++ --',1 | num++); // 1
console.log('num --',num); // 0

// 2. | (按位或)
// 转成二进制 进行或操作
// 1011  11
// 0101  5
// 1110  15
console.log('11|5 --',11|5);

// 3. && (短路与)
// 返回第一个假值(有假值) 或最后一个值(无假值)
// 注意：找到第一个假值后 不会判断后续的变量
console.log('2 && 1 --',2 && 1); // 1
console.log('1 && 0 && 2 && null && 3 --',1 && 0 && 2 && null && 3); // 0

// 4. &(按位与)
// 1011 11
// 0101 5
// 0001 1
console.log('11&5 --',11&5);

// 5. ^(按位异或) 同1同0返回0
// 1011 11
// 0101 5
// 1110 14
console.log('11^5 --',11^5);

// 6. 左移
console.log('16<<2 -- ',16<<2);
console.log('16>>2 -- ',16>>2);

// 3. ! (非)  !!(等效于if()中判断的逻辑)
// 3.1 将数值转成布尔类型
// 3.2 返回相反的值
console.log('!0 --',!0);
console.log('!1 --',!1);
console.log('!!0 --',!!0); // !!相当于Boolean()
